name: QualGen CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  QGJOB_SERVER_URL: http://localhost:3000

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: qualgen123
          POSTGRES_USER: qualgen
          POSTGRES_DB: qualgen
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://qualgen:qualgen123@localhost:5432/qualgen
          REDIS_URL: redis://localhost:6379

      - name: Build application
        run: npm run build

      - name: Start job server
        run: |
          npm run start:server &
          sleep 10
        env:
          DATABASE_URL: postgresql://qualgen:qualgen123@localhost:5432/qualgen
          REDIS_URL: redis://localhost:6379
          PORT: 3000

      - name: Install CLI globally
        run: |
          npm run build:cli
          npm link

      - name: Run integration tests
        run: npm run test:integration
        env:
          QGJOB_SERVER_URL: ${{ env.QGJOB_SERVER_URL }}

  appwright-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: qualgen123
          POSTGRES_USER: qualgen
          POSTGRES_DB: qualgen
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start job server
        run: |
          npm run start:server &
          sleep 15
        env:
          DATABASE_URL: postgresql://qualgen:qualgen123@localhost:5432/qualgen
          REDIS_URL: redis://localhost:6379
          PORT: 3000

      - name: Wait for server to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'

      - name: Install CLI globally
        run: |
          npm run build:cli
          npm link

      - name: Submit AppWright test job (Emulator)
        id: submit-emulator
        run: |
          JOB_ID=$(qgjob submit \
            --org-id "${{ github.repository_owner }}" \
            --app-version-id "${{ github.sha }}" \
            --test-path "./tests/appwright/login.spec.js" \
            --priority 8 \
            --target emulator \
            --server-url "${{ env.QGJOB_SERVER_URL }}" \
            --wait \
            --timeout 300 | grep "Job ID:" | awk '{print $3}')
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Submit AppWright test job (Device)
        id: submit-device
        run: |
          JOB_ID=$(qgjob submit \
            --org-id "${{ github.repository_owner }}" \
            --app-version-id "${{ github.sha }}" \
            --test-path "./tests/appwright/navigation.spec.js" \
            --priority 6 \
            --target device \
            --server-url "${{ env.QGJOB_SERVER_URL }}" \
            --wait \
            --timeout 300 | grep "Job ID:" | awk '{print $3}')
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Submit AppWright test job (BrowserStack)
        id: submit-browserstack
        run: |
          JOB_ID=$(qgjob submit \
            --org-id "${{ github.repository_owner }}" \
            --app-version-id "${{ github.sha }}" \
            --test-path "./tests/appwright/e2e.spec.js" \
            --priority 5 \
            --target browserstack \
            --server-url "${{ env.QGJOB_SERVER_URL }}" \
            --wait \
            --timeout 300 | grep "Job ID:" | awk '{print $3}')
          echo "job_id=$JOB_ID" >> $GITHUB_OUTPUT

      - name: Check all job statuses
        run: |
          echo "Checking job statuses..."
          qgjob status --job-id "${{ steps.submit-emulator.outputs.job_id }}" --server-url "${{ env.QGJOB_SERVER_URL }}"
          qgjob status --job-id "${{ steps.submit-device.outputs.job_id }}" --server-url "${{ env.QGJOB_SERVER_URL }}"
          qgjob status --job-id "${{ steps.submit-browserstack.outputs.job_id }}" --server-url "${{ env.QGJOB_SERVER_URL }}"

      - name: List all jobs for organization
        run: |
          qgjob list --org-id "${{ github.repository_owner }}" --server-url "${{ env.QGJOB_SERVER_URL }}"

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push job server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.server
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/job-server:latest
            ghcr.io/${{ github.repository }}/job-server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push test agent image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.agent
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/test-agent:latest
            ghcr.io/${{ github.repository }}/test-agent:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          echo "This would typically involve:"
          echo "1. Updating Kubernetes manifests"
          echo "2. Rolling out new container images"
          echo "3. Running smoke tests"
          echo "4. Monitoring deployment health"

      - name: Run smoke tests
        run: |
          echo "Running post-deployment smoke tests..."
          # Add your smoke test commands here

  cleanup:
    runs-on: ubuntu-latest
    needs: [appwright-tests]
    if: always()

    steps:
      - name: Cleanup test jobs
        run: |
          echo "Cleaning up test jobs and resources..."
          # Add cleanup commands if needed
